
<%= simple_form_for(@event) do |f| %>
  <%= f.error_notification %>
  <%= f.error_notification message: f.object.errors[:base].to_sentence if f.object.errors[:base].present? %>

  <div class="form-inputs">
    <%= f.file_field :cover %>
    <%= f.input :title %>
    <%= f.input :description %>
    <%= f.input :location %>
    <%= f.input :hyperlink %>
    <%= f.input :start_of_date %>
    <%= f.input :end_of_date %>
    <%= f.input :published, collection: Event.published_statuses.map {|p| [p, p]} %>
    <%= f.text_area :content, :class => "tinymce", :rows => 40, :cols => 120 %>
  </div>

  <div class="form-actions">
    <%= f.button :submit %>
  </div>
<% end %>
<%= tinymce_assets %>
 <%#= tinymce %>
 <script type="text/javascript">
   //selector: "textarea.tinymce"
   //tinyMCE.init({
  //   selector: 'textarea.editor'
  // });

  tinymce.init({
   selector: 'textarea.tinymce',
   menubar: false,
   toolbar: ["styleselect | bold italic | undo redo | link | table | code | alignleft | aligncenter | alignjustify customInsertButton | customDateButton"],
   plugins: "link,table,code",
   setup: function (editor) {

     editor.ui.registry.addButton('customInsertButton', {
       text: 'My Button',
       onAction: function (_) {
         editor.insertContent('&nbsp;<strong>It\'s my button!</strong>&nbsp;');
       }
     });

     var toTimeHtml = function (date) {
       return '<time datetime="' + date.toString() + '">' + date.toDateString() + '</time>';
     };

     editor.ui.registry.addButton('customDateButton', {
       icon: 'insert-time',
       tooltip: 'Insert Current Date',
       disabled: true,
       onAction: function (_) {
         editor.insertContent(toTimeHtml(new Date()));
       },
       onSetup: function (buttonApi) {
         var editorEventCallback = function (eventApi) {
           buttonApi.setDisabled(eventApi.element.nodeName.toLowerCase() === 'time');
         };
         editor.on('NodeChange', editorEventCallback);

         /* onSetup should always return the unbind handlers */
         return function (buttonApi) {
           editor.off('NodeChange', editorEventCallback);
         };
       }
     });
   }
 });

 </script>
